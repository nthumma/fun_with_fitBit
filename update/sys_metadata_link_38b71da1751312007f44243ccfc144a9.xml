<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>110ff46d411312007f442bbd1a5d8741</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;record_update table="x_fitbit_fun_with_fitbit_labs"&gt;
    &lt;x_fitbit_fun_with_fitbit_labs action="INSERT_OR_UPDATE"&gt;
        &lt;code_sample&gt;&lt;![CDATA[var FitBitOauthHandler = Class.create();
FitBitOauthHandler.prototype = {

 	logInfo:"FitBitOauthHandler logging",
	/* Called by a custom OAuth response provide name of the ouath profile */
	initialize: function(/* Outbound REST name */ tokenReq, /* sysID of calling REST def*/callingID) {
		try{
		this.getTokenReq = tokenReq;
		this.logInfo +="\n Token request REST : " + this.getTokenReq;
		this.logInfo +="\n calling function ID : " + callingID;
		this.callingRestMsg = new GlideRecord("sys_rest_message");
		this.callingRestMsg.get(callingID);
		this.logInfo +="\n Calling REST MSG " + this.callingRestMsg.name;
		this.oauthProfileRec = this.callingRestMsg.oauth2_profile;
		this.logInfo +="\n Profile : " + this.oauthProfileRec.name;
		//this.oauthRegProfile = this._upsertReqProfile();
		//this.logInfo +="\n Oauth Requestor Profile : " + this.oauthRegProfile;
		gs.info(this.logInfo,"OauthInfo");

		}
		catch(err){
		this.logInfo +="\n error intilizing FitBitOauthHandler\n" + err.message;	
			gs.error(this.logInfo,"OauthInfo");
		}
	},
	/******************************************************************
	
 	*******************************************************************
 	* Input - sys_id of a core_company record
 	* Output - comma separated list of all sys_ids in teh tree
 	*******************************************************************
 	* 04-10-2016   SETrumble   Fruition Partners
 	********************************************************************/
	
	getToken: function(code){
		try {
			var r = new sn_ws.RESTMessageV2(this.getTokenReq, 'post');
			r.setStringParameter('newCode',code);
			r.setStringParameter('clientId', this.oauthProfileRec.oauth_entity.client_id);
			r.setStringParameter('grantType', this.oauthProfileRec.grant_type);
			r.setStringParameter('redirectURL', this.oauthProfileRec.oauth_entity.redirect_url);
			
			var response = r.execute();
			var responseBody = response.getBody();
			var httpStatus = response.getStatusCode();
			this.logInfo +="\nSTATUS : "+httpStatus;
			this.logInfo +="\nBody :\n "+responseBody;
			
			var rspObject = JSON.parse(responseBody);
			this._upsertToken(rspObject.access_token,"access_token",rspObject.expires_in);
			//this._upsertToken(rspObject.refresh_token,"refresh_token",86400);
			
			var retStr =  this.logInfo + " Access token = " + rspObject.access_token;
			
			return retStr;
			
		}
		catch(ex) {
			this.logInfo +="\nerror in gettoken " + ex.getMessage();
			gs.error(this.logInfo,"OauthInfo");
		}
		
	},
	/*
	_restMessageWithProfile: function(){
		var grRestMsg = new GlideRecord("sys_rest_message");
		grRestMsg.addQuery("authentication_type","oauth2");
		grRestMsg.addQuery("oauth2_profile",this.oauthProfileRec.sys_id);
		grRestMsg.query();
		while (grRestMsg.next()){
			this._upsertProfile(grRestMsg.sys_id);
		}
	},
	
	*/
	_upsertReqProfile: function(){
		try{
		this.logInfo +="\n getting Oauth Requestor Profile - oauth_entity_profile:" + this.oauthProfileRec.sys_id;
		this.logInfo +=" requestor_id : " + this.callingRestMsg.sys_id;
		var ReqProfileId = "";
		var grRequestProfile = new GlideRecord("oauth_requestor_profile");
		//grRequestProfile.addQuery("oauth_entity_profile",this.oauthProfileRec.sys_id);
		grRequestProfile.addQuery("requestor_context","sys_rest_message");
		grRequestProfile.addQuery("requestor_id",this.callingRestMsg.sys_id);
		grRequestProfile.query();
		if (grRequestProfile.next()){
			//no update needed if alread there
			//grRequestProfile.update();
			ReqProfileId = grRequestProfile.sys_id+"";

			this.logInfo +="\noauth_requestor_profile found ID: " + ReqProfileId;
		}else{
			grRequestProfile.init();
			grRequestProfile.requestor_context ="sys_rest_message";
			//grRequestProfile.oauth_entity_profile = this.oauthProfileRec.sys_id;
			grRequestProfile.requestor_id =this.callingRestMsg.sys_id;
			grRequestProfile.insert();
			ReqProfileId = grRequestProfile.sys_id+"";
			this.logInfo +="\nNew oauth_requestor_profile inserted ID: " + ReqProfileId;

		}
		 return ReqProfileId;
		}catch(err){
			this.logInfo += "error _upsertReqProfile :\n" + err.message;
			return"";
		}
		
	},
	_upsertToken: function(vToken,token_type, expSec){
		this.logInfo +="\n calling _upsertToken: Token:" + vToken;
		this.logInfo +="\n token type:" + token_type + "/nexpsec:" +expSec ;
		this.logInfo +="\noauth_requestor_profile : " + this.oauthRegProfile;
		var gdt = new GlideDateTime();
		gdt.addSeconds(expSec);
		this.logInfo +="\n expires in: Token:" + gdt.getDisplayValue();
		var cred = new GlideRecord("oauth_credential");
		cred.addQuery("peer",this.oauthProfileRec.oauth_entity);
		cred.addQuery("oauth_requestor_profile",this.oauthRegProfile);
		cred.addQuery("type",token_type);
		cred.query();
		if(cred.next()){
			cred.token = vToken;
			cred.expires = gdt;
			cred.update();
			this.logInfo +="\n Oauth credentials updated: " + cred.sys_id;

		}else{
			cred.peer = this.oauthProfileRec.oauth_entity;
			cred.oauth_requestor_profile = this.oauthRegProfile;
			cred.type=token_type;
			cred.token = vToken;
			cred.expires = gdt;
			cred.insert();	
			this.logInfo +="\n New Oauth credentials Inserted: " + cred.sys_id;
		}
		
	},

    type: 'FitBitOauthHandler'
}]]&gt;&lt;/code_sample&gt;
        &lt;details&gt;&lt;![CDATA[&lt;p&gt;Code if you need toFitBitOauthHandler&lt;/p&gt;]]&gt;&lt;/details&gt;
        &lt;name&gt;LAB 1.3 Custom Oauth - Part 2x - FitBitOauthHandler&lt;/name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2016-05-09 23:37:11&lt;/sys_created_on&gt;
        &lt;sys_id&gt;110ff46d411312007f442bbd1a5d8741&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2016-05-09 23:42:09&lt;/sys_updated_on&gt;
    &lt;/x_fitbit_fun_with_fitbit_labs&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-05-10 01:18:30</sys_created_on>
        <sys_id>38b71da1751312007f44243ccfc144a9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>LAB 1.3 Custom Oauth - Part 2x - FitBitOauthHandler</sys_name>
        <sys_package display_value="fitbit" source="x_fitbit">116b4c00781312007f442fb9b8ed6ee0</sys_package>
        <sys_policy/>
        <sys_scope display_value="fitbit">116b4c00781312007f442fb9b8ed6ee0</sys_scope>
        <sys_update_name>sys_metadata_link_38b71da1751312007f44243ccfc144a9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-05-10 01:18:30</sys_updated_on>
        <tablename>x_fitbit_fun_with_fitbit_labs</tablename>
    </sys_metadata_link>
</record_update>
